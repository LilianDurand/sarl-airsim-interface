/** 
 * 
 */
package io.sarl.airsim.behaviors.target

import io.sarl.airsim.influences.MoveByVelocity
import io.sarl.airsim.influences.Takeoff
import io.sarl.airsim.math.Vector3
import io.sarl.airsim.math.Vector4
import io.sarl.airsim.perceptions.sim.SimPosePerception
import io.sarl.core.DefaultContextInteractions
import io.sarl.core.Initialize
import io.sarl.core.Logging
import io.sarl.core.Schedules
import io.sarl.airsim.filters.mean.Vector3MeanFilter

/** 
 * Drone behavior: defines a target point (the opposite of the start point) and try to reach this target
 * Eventually avoids obstacles 
 * @author Alexandre Lombard
 * 
 */
behavior ReachTargetPoint3D extends AbstractReachTargetPoint {

	uses Logging, DefaultContextInteractions, Schedules
	
	val targetRadius = 1.0f
	val startupDelayMs = 5000
	val periodMs = 25
	val avoidanceRadius = 1.0f
	val slidingScaling = 15f
	val attractionFactor = 15f
	
	val zOffset = -2.5f
	
	val meanFilter = new Vector3MeanFilter(6)

	on Initialize {
		info("Drone agent is starting...")

		// Note: before the takeoff, the drone is not affected
		emit (new Takeoff)

		in(startupDelayMs) [
			every(periodMs) [
				try {
					if (this.initialPose !== null && this.targetPoint !== null &&
						(new Vector3(this.pose.position.getX(), this.pose.position.getY(), 0.0f) -
							new Vector3(this.targetPoint.getX(), this.targetPoint.getY(), 0.0f)).length() <
							targetRadius && this.velocity.length() < 0.1) {
						// If we are at the target position, and if the velocity is almost null, we reset the drone position
						// reset()
						// If we are at the target position, we change the target position (source becomes destination)
						// synchronized (this.pose) {
						//	if(this.targetPoint !== null) {
						// if((this.targetPoint - new Vector3(this.initialPose.position)).length() < 1e-2f) {
						// this.targetPoint = new Vector3(
						// -this.initialPose.position.getX(),
						// -this.initialPose.position.getY(),
						// this.initialPose.position.getZ() + zOffset)
						// } else {
						// this.targetPoint = new Vector3(this.initialPose.position.getX(), this.initialPose.position.getY(), this.initialPose.position.getZ() + zOffset)
					//		}
					//	}
					// }
					} else {
						// Note: the computed force is scaled to reduce its strength
						val movementForce = meanFilter.filter(computeForce() * 0.1f)

						emit(
							new MoveByVelocity(movementForce.getX(), movementForce.getY(), movementForce.getZ(),
								periodMs / 1000.0f))
					}	
				} catch (t: Throwable) {
					t.printStackTrace()
				}
			]
		]
	}

	on SimPosePerception {
		// Update the internal pose state and fix the target point if not set
		if(this.targetPoint === null) {
			this.targetPoint = new Vector3(
				-this.pose.position.getX(),
				-this.pose.position.getY(),
				this.pose.position.getZ() + zOffset) 		// We don't invert the Z, but we add an offset so it's not on the ground
		}
	}
	
	def computeForce(): Vector3 {
		// Checking pre-conditions
		if(this.pose === null)
			return new Vector3()
			
		if(this.targetPoint === null)
			return new Vector3()
			
		if(this.velocity === null)
			return new Vector3()

		// Storing references to avoid async changes
		val targetPoint = this.targetPoint
		val position = new Vector3(this.pose.position)
		
		// Checking values
		if(Double.isNaN(targetPoint.getX()) || Double.isNaN(position.getX()))
			return new Vector3()
			
		// If the drone is within a given radius around its target point, we stop moving (note: this will oscillate
		// due to inertia)
		if((targetPoint - position).length() < targetRadius)
			return new Vector3()
			
		// Find among the neighbours if there are potentials obstacles and compute the time to collision
		var sliding: Vector3 = computeSlidingForce()

		if(sliding === null)
			sliding = new Vector3(0f, 0f, 0f)

		val attraction = computeAttraction((targetPoint - position).normalized(), sliding.length(), attractionFactor,
			3.0f)
		val result = (sliding * slidingScaling) + attraction

		if (result.dot((targetPoint - position)) < 0.0)
			info("Critical state: " + attraction + " ; " + sliding)

		return result
	}

	def computeSlidingForce(): Vector3 {
		var sliding: Vector3 = null

		// Storing references to avoid async changes
		val targetPoint = this.targetPoint
		val position = this.pose.position

		sliding = neighbours
			.filter [ k, v | v.pose !== null && v.state !== null ]
			.mapValues [
				val selfPosition = new Vector4(position.getX(), position.getY(), position.getZ(), 0f)
				val selfDirection = this.velocity
				val otherPosition = new Vector4(it.pose.position.getX(), it.pose.position.getY(), it.pose.position.getZ(), 0f)
				val otherDirection = it.state.linearVelocity
				
				// If some data are erroneous, we ignore them
				if(Float.isNaN(otherPosition.getX()) || Float.isNaN(selfPosition.getX()) || Float.isNaN(otherDirection.getX()) || Float.isNaN(selfDirection.getX()))
					return new Vector3()
				
				//var d = Math.abs(
				//			otherPosition.minus(selfPosition).cross(new Vector4(selfDirection.getX(), selfDirection.getY(), selfDirection.getZ(), 1f)).dot(new Vector4(otherDirection.getX(), otherDirection.getY(), otherDirection.getZ(), 1f))) /
				//			(new Vector4(selfDirection.getX(), selfDirection.getY(), selfDirection.getZ(), 1f).cross(new Vector4(otherDirection.getX(), otherDirection.getY(), otherDirection.getZ(), 1f)).length())
				
				val a0 = selfPosition
				val b0 = otherPosition
				val va = new Vector4(selfDirection.getX(), selfDirection.getY(), selfDirection.getZ(), 1.0f)
				val vb = new Vector4(otherDirection.getX(), otherDirection.getY(), otherDirection.getZ(), 1.0f)
				val a = va.squaredNorm()
				val b = va.dot(vb)
				val c = vb.squaredNorm()
				val w0 = (a0 - b0)
				val _d = va.dot(w0)
				val e = vb.dot(w0)
				
				val e1 = a0 - b0
				val e2 = va * (b * e - c * _d) - vb * (a * e - b * _d)
				val e3 = (a * c - b * b)
				var d = (e1 + e2 * (1.0f / e3)).norm()

				if(Double.isNaN(d)) {
					// If d is NaN it means that the direction are colinear
					// If so, the distance between the lines is the distance of a point from a line to a point
					// of the other line 
					//val u = new Vector4(otherDirection.getX(), otherDirection.getY(), otherDirection.getZ(), 1f)
					//d = selfPosition.minus(otherPosition).cross(u).length() / u.length()
					d = 0.0f	// TODO
					
					if(Double.isNaN(d)) d = 0.0f
				}
				
				if(d > avoidanceRadius) {
					// The minimal distance will be above the avoidance radius so there won't be a collision
					new Vector3()
				} else {
					// There may be a collision
					val t = computeCollisionTime(d, selfPosition, selfDirection, otherPosition, otherDirection.toVector3)

					if(t < 1e-3f)
						return new Vector3() // Too late, we ignore to avoid errors further
						
					if(t > 1e3f)
						return new Vector3() // Too early
					
					val otherClosePosition = new Vector4(otherPosition.getX() + otherDirection.getX() * t, otherPosition.getY() + otherDirection.getY() * t, otherPosition.getZ() + otherDirection.getZ() * t, t)

					val obstacleDirection = (otherClosePosition - selfPosition).normalized()
					
					if((targetPoint - selfPosition.toVector3()).dot(obstacleDirection.toVector3()) < 0.0f)
						return new Vector3()
					
					// 2D avoidance strategy
					//val slidingDirection = new Vector3(-obstacleDirection.getY(), obstacleDirection.getX(), 0.0f)
					// Try #01 3D avoidance strategy
					//val otu = (this.targetPoint - selfPosition.toVector3()).normalized()
					//val vu = new Vector3(selfDirection.getX(), selfDirection.getY(), selfDirection.getZ()).normalized()
					//val slidingDirection: Vector3 = otu.cross(vu)
					// Try #02 3D avoidance strategy
					val slidingDirectionXY = new Vector3(-obstacleDirection.getY(), obstacleDirection.getX(), 0.0f)
					//val slidingDirectionXY = new Vector3()
					val slidingDirectionXZ = new Vector3(obstacleDirection.getZ(), 0.0f, -obstacleDirection.getX())
					//val slidingDirection = (slidingDirectionXY * 0.25f + slidingDirectionXZ * 0.75f).normalized
					val slidingDirection = (slidingDirectionXY + slidingDirectionXZ).normalized
					
					val slidingScale = computeSlidingScale(t, 0.25f, 4f, 10f)
					
					val sign = 1.0f
					val slidingVector = slidingDirection * slidingScale.floatValue * sign
					
					return slidingVector
				}

				return new Vector3()
			]
			.values
			.filter[!Float.isNaN(it.getX()) && !Float.isNaN(it.getY()) && !Float.isNaN(it.getZ())]
			.reduce[p1, p2 | new Vector3(p1.getX() + p2.getX(), p1.getY() + p2.getY(), p1.getZ() + p2.getZ())]
		
		return sliding
	}
	
	def switchTargetPoint() {
		if(this.targetPoint !== null) {
			if((this.targetPoint - new Vector3(this.initialPose.position)).length() < 1e-2f) {
				this.targetPoint = new Vector3(
					-this.initialPose.position.getX(),
					-this.initialPose.position.getY(),
					this.initialPose.position.getZ() + zOffset)
			} else {
				this.targetPoint = new Vector3(this.initialPose.position.getX(), this.initialPose.position.getY(),
					this.initialPose.position.getZ() + zOffset)
			}
		}
	}

	/** 
	 * Computes the time associated to the closest distance d of the trajectory of the drones
	 * @param d the minimum distance between the spatio-temporal trajectories
	 * @param selfPosition the position of this drone
	 * @param selfDirection the direction of this drone
	 * @param otherPosition the position of the other drone
	 * @param otherDirection the direction of the other drone
	 */
	private def computeCollisionTime(d : Float, selfPosition : Vector4, selfDirection : Vector3, otherPosition : Vector4, otherDirection : Vector3) : Float {
		val coefA = Math.pow(selfDirection.getX() - otherDirection.getX(), 2) +
			Math.pow(selfDirection.getY() - otherDirection.getY(), 2) +
			Math.pow(selfDirection.getZ() - otherDirection.getZ(), 2)
		var coefB = 2f * (selfPosition.getX() - otherPosition.getX()) * (selfDirection.getX() - otherDirection.getX()) +
			2f * (selfPosition.getY() - otherPosition.getY()) * (selfDirection.getY() - otherDirection.getY()) +
			2f * (selfPosition.getZ() - otherPosition.getZ()) * (selfDirection.getZ() - otherDirection.getZ())
		val coefC = -Math.pow(d, 2)

		val delta = Math.pow(coefB, 2) - 4f * coefA * coefC
		
		if(delta < 0.0f) {
			return Float.MAX_VALUE
		}
		
		return ((-coefB + Math.sqrt(delta)) / (2 * coefA) / 2).floatValue 	// Note: I'm dividing by two but I don't know why
	}
}




