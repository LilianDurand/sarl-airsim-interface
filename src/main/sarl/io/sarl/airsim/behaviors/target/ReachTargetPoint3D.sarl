/** 
 * 
 */
package io.sarl.airsim.behaviors.target

import io.sarl.airsim.filters.mean.Vector3MeanFilter
import io.sarl.airsim.influences.MoveByVelocity
import io.sarl.airsim.influences.Takeoff
import io.sarl.airsim.math.Vector2
import io.sarl.airsim.math.Vector3
import io.sarl.airsim.math.Vector4
import io.sarl.airsim.perceptions.sim.SimGroundTruthKinematicsPerception
import io.sarl.airsim.perceptions.sim.SimPosePerception
import io.sarl.airsim.simulation.events.SimulationInitialized
import io.sarl.airsim.vo.Cone
import io.sarl.core.DefaultContextInteractions
import io.sarl.core.Initialize
import io.sarl.core.Logging
import io.sarl.core.Schedules
import java.util.ArrayList
import java.util.List

/** 
 * Drone behavior: defines a target point (the opposite of the start point) and try to reach this target
 * Eventually avoids obstacles 
 * @author Alexandre Lombard, Lilian Durand, Rodolphe Ponthon
 * 
 */
behavior ReachTargetPoint3D extends AbstractReachTargetPoint {

	uses Logging, DefaultContextInteractions, Schedules
	
	var initialized = false
	
	val targetRadius = 1.0f
	val startupDelayMs = 5000
	val periodMs = 200
	val avoidanceRadius = 5.0f
	val slidingScaling = 1f
	val attractionFactor = 15f
	
	val zOffset = -2.5f
	
	val meanFilter = new Vector3MeanFilter(6)
	
	var isArrived : boolean

	on Initialize {
		this.isArrived = false
	}
	
	on SimulationInitialized {
		initialize
	}

	on SimPosePerception [this.targetPoint === null] {
		this.targetPoint = computeTargetPoint(this.pose.position.toVector3)
	}
	
	on SimGroundTruthKinematicsPerception [initialized && occurrence.state.linearVelocity.length <= 0.01f] {
		emit(new MoveByVelocity(new Vector3(0.0f, 0.0f, -20.0f), periodMs / 1000.0f))
	}
	
	def initialize {
		info("Drone agent is starting...")
		
		initialized = true

		// Note: before the takeoff, the drone is not affected
		emit(new Takeoff)

		in(startupDelayMs) [
			every(periodMs) [
				try {
					if (this.initialPose !== null && this.targetPoint !== null &&
						(new Vector3(this.pose.position.getX(), this.pose.position.getY(), 0.0f) -
							new Vector3(this.targetPoint.getX(), this.targetPoint.getY(), 0.0f)).length() <
							targetRadius && this.velocity.length() < 0.1) {
						// For the simulation, the agent must send an influence even if it's an empty one
						emit(new MoveByVelocity(0.0f, 0.0f, 0.0f, periodMs / 1000.0f))
						if(!this.isArrived){
							this.isArrived = true
							info("Arrived")
						}
					} else {
						// Note: the computed force is scaled to reduce its strength
						val movementForce = computeForce()
						
						//Move the drone to the correct direction
						emit(
							new MoveByVelocity(movementForce.getX(), movementForce.getY(), movementForce.getZ(),
						   periodMs / 1000.0f))
					}
				} catch (t : Throwable) {
					t.printStackTrace()
				}
			]
		]
	}
	
	def computeForce(): Vector3 {
		// Checking pre-conditions
		if(this.pose === null)
			return new Vector3()
			
		if(this.targetPoint === null)
			return new Vector3()
			
		if(this.velocity === null)
			return new Vector3()

		// Storing references to avoid async changes
		val targetPoint = this.targetPoint
		val position = new Vector3(this.pose.position)
		
		// Checking values
		if(Double.isNaN(position.getX())){
			return new Vector3()
		}
		if (Double.isNaN(targetPoint.getX())){
			return new Vector3();
		}
			
		if((targetPoint - position).length() < targetRadius)
			return new Vector3()
			
		// 
		var direction: Vector3 = findSafeDirection()

		if(direction === null)
			direction = new Vector3(0f, 0f, 0f)

		return direction
	}

	def findSafeDirection() : Vector3 {

		// Storing references to avoid async changes
		val targetPoint = this.targetPoint
		val position = this.pose.position
		val maxVelocity : float = 1.5f

		// List of considered velocity obstacles represented by a Cone
		var VOs : ArrayList<Cone> = new ArrayList<Cone>()
		
		val temp = neighbours.filter[k, v|v.pose !== null && v.state !== null]
		for(key : temp.keySet()){
			val drone = temp.get(key)
			val selfPosition = new Vector4(position.getX(), position.getY(), position.getZ(), 0f)
			val selfDirection = this.velocity
			val otherPosition = new Vector4(drone.pose.position.getX(), drone.pose.position.getY(),
			drone.pose.position.getZ(),
				0f)
			val otherDirection = drone.state.linearVelocity
				
			// If some data are erroneous, we ignore them
			if (Float.isNaN(otherPosition.getX()) || Float.isNaN(selfPosition.getX()) ||
				Float.isNaN(otherDirection.getX()) || Float.isNaN(selfDirection.getX()))
				continue

			var d = (selfPosition - otherPosition).norm

			if (Double.isNaN(d)) {
				d = 0.0f // TODO
					
					if(Double.isNaN(d)) d = 0.0f
			}

			if (d > avoidanceRadius) {
				// The minimal distance will be above the avoidance radius so there won't be a collision
				continue
			} else {
				// There may be a collision
				var droneRadius : float = (1/Math.sqrt(2)).toFloat
				var r = droneRadius * 2
				var VO : Cone
				//Calculate the velocity obstacle for the UAV
				var tangents : List<Vector3> = findTangents(r, selfPosition.toVector3, otherPosition.toVector3)
				VO = new Cone(selfPosition.toVector3 + otherDirection.toVector3,
					tangents.get(0) + otherDirection.toVector3, tangents.get(1) + otherDirection.toVector3)
				VOs.add(VO)
			}
		}
			//UAV wants to go directly to the target point if possible
			val desiredDir : Vector3 = (targetPoint - new Vector3(position.x, position.y, position.z)).normalize()*maxVelocity
			
			for(var theta=0; theta<90; theta+=15){
				var radTheta = (theta * Math.PI / 180).toFloat
				var orthV = new Vector3(desiredDir.z, desiredDir.z, desiredDir.x + desiredDir.y)
				val quaterTheta = new Vector4(orthV.normalize, radTheta)
				var potentialDirTheta = quaterTheta * new Vector4(desiredDir.x, desiredDir.y, desiredDir.z, 0.0f) * quaterTheta.invert
				for(var phi = 0; phi < 180; phi+=10){
					var radPhi = (phi * Math.PI / 180).toFloat
					for(var i = 0; i<2; i++){
						val quaterPhi = new Vector4(desiredDir.normalize, radPhi*(1-2*i))
						var potentialDir = (quaterPhi * new Vector4(potentialDirTheta.x, potentialDirTheta.y, potentialDirTheta.z, 0.0f) * quaterPhi.invert).toVector3
						var isNotInVO = true
						for(vo : VOs){
							var currentVO = vo
							if(currentVO.isPointIn(position.toVector3 + potentialDir)){
								isNotInVO = false
								break
							}
						}
						if(isNotInVO){
							return potentialDir
						}
					}
				}
			}
		
		return new Vector3
	}

	//Find tangents on a circle (center p2) from a point p1
	def findTangents(radius : float, p1 : Vector2, p2 : Vector2) : List<Vector2> {
		var points = new ArrayList<Vector2>()
		val v = p1 - p2

		val b = v.norm
		var r = radius
		if(r>b){
			r = b
		}
		val th = Math.acos(r / b)

		val d = Math.atan2(v.y, v.x)
		val d1 = d + th
		val d2 = d - th

		points.add(new Vector2(p2.x + r * Math.cos(d1).toFloat, p2.y + r * Math.sin(d1).toFloat))
		points.add(new Vector2(p2.x + r * Math.cos(d2).toFloat, p2.y + r * Math.sin(d2).toFloat))
		
		return points
	}
		
	//Find tangents on a sphere (center p2) from a point p1
	def findTangents(radius : float, p1 : Vector3, p2 : Vector3) : List<Vector3> {
		var points = new ArrayList<Vector3>()
		//project on XY-plane
		val v = p1 - p2
		val rotationAxis = v.cross(new Vector3(v.x, v.y, 0.0f))
		val zAxis = new Vector3(0.0f,0.0f,1.0f)
		val alpha = Math.asin((zAxis.dot(v)) / (zAxis.norm * v.norm)).toFloat
		val quater = new Vector4(rotationAxis, alpha)
		val invertQuarter = new Vector4(rotationAxis, -alpha)
		val vOnXY = quater * new Vector4(v.x, v.y, v.z, 0.0f) * quater.invert
		
		//Find tangents points in 2D (XY-Plane)
		var tangents = findTangents(radius, new Vector2(vOnXY.x, vOnXY.y), new Vector2())
		
		for(tangent : tangents){
			var correctTangent = (invertQuarter * new Vector4(tangent.x, tangent.y, 0.0f, 1.0f) * invertQuarter.invert).xyz
			points.add(p2  + correctTangent)
		}
		
		return points
	}

	def computeTargetPoint(position : Vector3) {
		val angle = 2.0 * Math.PI / 10.0
		val symmetry = new Vector3(-position.getX(), -position.getY(), position.getZ() + zOffset)
		val rotation =
				new Vector3(
					(Math.cos(angle) * symmetry.getX() - Math.sin(angle) * symmetry.getY()).floatValue,
					(Math.sin(angle) * symmetry.getX() + Math.cos(angle) * symmetry.getY()).floatValue,
					symmetry.getZ())
					
		return symmetry
	}
	
	def switchTargetPoint() {
		if(this.targetPoint !== null) {
			if((this.targetPoint - new Vector3(this.initialPose.position)).length() < 1e-2f) {
				this.targetPoint = new Vector3(
					-this.initialPose.position.getX(),
					-this.initialPose.position.getY(),
					this.initialPose.position.getZ() + zOffset)
			} else {
				this.targetPoint = new Vector3(this.initialPose.position.getX(), this.initialPose.position.getY(),
					this.initialPose.position.getZ() + zOffset)
			}
		}
	}
}




