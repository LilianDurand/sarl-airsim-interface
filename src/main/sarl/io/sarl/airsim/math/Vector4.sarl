package io.sarl.airsim.math

import org.eclipse.xtend.lib.annotations.Accessors

/**
 * Represents a 4D vector
 * @author Alexandre Lombard
 */
class Vector4 {
	@Accessors(PUBLIC_GETTER)
	val x : Float
	@Accessors(PUBLIC_GETTER)
	val y: Float
    @Accessors(PUBLIC_GETTER)
	val z : Float
	@Accessors(PUBLIC_GETTER)
	val t: Float
	
	new() {
		this.x = 0f
		this.y = 0f
        this.z = 0f
        this.t = 0f
	}
	
	new (x: Float, y: Float, z: Float, t: Float) {
		this.x = x
		this.y = y
        this.z = z
        this.t = t
	}

    def plus(v: Vector4) : Vector4 {
        return this + v
    }
	
	def operator_plus(v: Vector4) : Vector4 {
		return new Vector4(x + v.x, y + v.y, z + v.z, t + v.t)
	}

    def minus(v: Vector4) : Vector4 {
        return this - v
    }
	
	def operator_minus(v: Vector4) : Vector4 {
		return new Vector4(x - v.x, y - v.y, z - v.z, t - v.t)
	}

    def times(l: Float) : Vector4 {
        return this * l
    }
	
	def operator_multiply(l: Float) : Vector4 {
		return new Vector4(x * l, y * l, z * l, t * l)
	}

	def operator_multiply(l : Float, v : Vector4) : Vector4 {
		return new Vector4(v.x * l, v.y * l, v.z * l, v.t * l)
	}
	
	def operator_minus(): Vector4 {
		return new Vector4(-x, -y, -z, -t)
	}

    def dot(v: Vector4) : Float {
        return x * v.x + y * v.y + z * v.z + t * v.t
    }
	
	def squaredNorm() : Float {
		return x * x + y * y + z * z + t * t
	}

    def normalized() : Vector4 {
        return this * (1.0f / norm())
    }
	
	def norm(): Float {
		return Math.sqrt(squaredNorm()).floatValue
	}

    def length() : Float {
        return norm()
    }
	
	override toString() : String {
		return "[" + x + ", " + y + ", " + z + ", " + t + "]"
	}
}