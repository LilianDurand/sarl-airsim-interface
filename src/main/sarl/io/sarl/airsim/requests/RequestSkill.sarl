/** 
 * 
 */
package io.sarl.airsim.requests

import io.sarl.core.DefaultContextInteractions
import io.sarl.lang.core.Event
import java.util.Collections
import java.util.List
import org.eclipse.xtext.xbase.lib.Procedures.Procedure1

/** 
 * @author Alexandre Lombard
 * 
 */
skill RequestSkill implements RequestCapacity {
	uses DefaultContextInteractions
	
	val pendingRequests = <Class<? extends Event>, List<Procedure1<Object>>>newHashMap
	
	def ask(what : RequestEvent, then: Procedure1<Object>) {
		val expectedAnswer = what.expectedAnswer
		
		if (!pendingRequests.containsKey(what)) {
			pendingRequests.put(expectedAnswer, <Procedure1<Object>>newArrayList)
		}
		pendingRequests.get(expectedAnswer).add(then)
		
		emit(what)
	}
	
	on Event [ pendingRequests.containsKey(occurrence.class) ] {
		val pendingRequestList = pendingRequests.get(occurrence.class)
		if(pendingRequestList !== null) {
			val copy = <Procedure1<Object>>newArrayList
			Collections.copy(copy, pendingRequestList)
			pendingRequests.remove(occurrence.class)
			copy.forEach[it.apply(occurrence)]
		}
	}
	
}
