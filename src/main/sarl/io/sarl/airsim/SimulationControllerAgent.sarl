/** 
 * 
 */
package io.sarl.airsim

import fr.utbm.airsim.api.MultirotorClientInterface
import io.sarl.airsim.influences.MoveByVelocity
import io.sarl.airsim.influences.Takeoff
import io.sarl.airsim.influences.sim.SetVehiclePose
import io.sarl.airsim.perceptions.MultirotorStatePerception
import io.sarl.airsim.perceptions.sim.SimGroundTruthKinematicsPerception
import io.sarl.airsim.perceptions.sim.SimPosePerception
import io.sarl.airsim.simulation.influence.BatchedInfluenceReactionStrategy
import io.sarl.airsim.simulation.allocation.FcfsFixedSizePoolAllocationStrategy
import io.sarl.airsim.simulation.scheduling.SimulationStrategy
import io.sarl.airsim.utils.ActiveWaitLock
import io.sarl.core.DefaultContextInteractions
import io.sarl.core.Initialize
import io.sarl.core.Logging
import io.sarl.core.Schedules
import io.sarl.lang.core.Address
import java.util.Collections
import org.msgpack.rpc.Client
import org.msgpack.rpc.loop.EventLoop

import static io.sarl.airsim.simulation.scheduling.FixedStepSimulationStrategy.fixedStepSimulationStrategy
import static io.sarl.airsim.simulation.scheduling.FixedStepBlockingSimulationStrategy.fixedStepBlockingSimulationStrategy
import io.sarl.airsim.simulation.events.SimulationInitialized
import org.eclipse.xtext.xbase.lib.Functions.Function2
import org.eclipse.xtext.xbase.lib.Functions.Function1
import org.eclipse.xtext.xbase.lib.Procedures.Procedure1
import io.sarl.airsim.simulation.influence.InfluenceReactionStrategy
import io.sarl.airsim.simulation.capacities.SimulationControlCapacity
import io.sarl.airsim.simulation.skills.airsim.AirSimSimulationControl
import io.sarl.airsim.simulation.capacities.MultirotorSimulationControlCapacity
import io.sarl.airsim.simulation.skills.airsim.AirSimMultirotorControl

/**
 * Agent in charge of controlling the simulation, transmitting the influences and
 * dispatching the perceptions .
 * This agent has basically 3 main roles and capacities:
 * - Managing the propagation of perceptions and influences
 * - Managing the simulation schedule
 * - Managing the affectation of bodies to agents
 * @author Alexandre Lombard
 * 
 */
agent SimulationControllerAgent {
	
	uses Logging, DefaultContextInteractions, Schedules
	
	uses SimulationControlCapacity, MultirotorSimulationControlCapacity

	/** The simulation step */
	val simulationStepMs = 200.0f

	val pool = newLinkedList("S0", "S1", "S2", "S3", "S4", "S5", "S6", "S7", "S8", "S9")
	val affectationStrategy =
			new FcfsFixedSizePoolAllocationStrategy([|
				val pool = pool
				Collections.shuffle(pool)
				return pool
			].apply)
	
	var simulationStrategy: SimulationStrategy

	/** The influence/reaction strategy defining when influence and perceptions should be propagated */
//	var influenceReactionStrategy = new DirectInfluenceReactionStrategy()
	/** Perceptions are propagated as soon as they are received, influences as soon as every one has sent one and eventually if the delay is respected */
	var influenceReactionStrategy : BatchedInfluenceReactionStrategy
	
	// Attributes used to access AirSim API
	val loop = EventLoop.defaultEventLoop()
	val rpcClient = new Client("127.0.0.1", 41451, loop)
	val multirotorClient = rpcClient.proxy(typeof(MultirotorClientInterface))
	
	on Initialize {
		// Install the simulation control capacities
		setSkill(new AirSimSimulationControl, SimulationControlCapacity)
		setSkill(new AirSimMultirotorControl, MultirotorSimulationControlCapacity)
		
		// Standard scheduling according to the direct influence/reaction strategy (it would also work with Batched but forbidding
		// influences from being applied immediately is not well-suited with real-time simulation)
		// Perceptions are retrieved regularly, simulation runs in real-time
//		this.influenceReactionStrategy = new DirectInfluenceReactionStrategy()
// 		this.schedulingStrategy = new RealTimeSchedulingStrategy[retrievePerceptions]
		
		// Scheduling according to the batched influence/reaction strategy
		// Perceptions are retrieved only after influences have been applied, simulation runs with fixed steps
		
		// We enable the API control for all bodies of the pool (even if they are not affected later)
		pool.forEach[it.enableControl]

		// At the beginning we started paused
		simPause(true)

		val influencesPropagated = new ActiveWaitLock()
		
		this.influenceReactionStrategy = new BatchedInfluenceReactionStrategy(
			[t, p|true], [ t, i |
				/*(t > 3000 || influencesPropagated.isLocked) && */i.size >= affectationStrategy.affectedBodiesCount
		], 2, false)

		influenceReactionStrategy.onInfluencesPropagated[
			debug("Influences propagated...")
			influencesPropagated.unlock
		]

		simulationStrategy = fixedStepBlockingSimulationStrategy [
			retrievePerceptionsBy = [ retrievePerceptions ]
			canContinueIf = [!influencesPropagated.isLocked]
			continueSimulationBy = [
				debug("Continuing simulation (begin)...")
				simContinueForTime(simulationStepMs / 1000.0f)
				//Thread.sleep(2000)
				influencesPropagated.lock
				debug("Continuing simulation (end)...")
			]
		]
		
//		simulationStrategy = fixedStepSimulationStrategy [
//			retrievePerceptionsBy = [ retrievePerceptions ]
//			continueSimulationBy = [multirotorClient.simContinueForTime(simulationStepMs / 1000.0f) ]
//		]
		
		// Schedule the loop
		atFixedDelay(simulationStepMs.longValue)[ simulationStrategy.loop ]
		
		in(2000) [ info("Sending the initialized simulation signal") emit(new SimulationInitialized) ]
	}
	
	/**
	 * When a drone emits the take-off instruction, transfers it to AirSim
	 */
	on Takeoff {
		val body = affectationStrategy.affectOrGetBody(occurrence.source, [a, n|onAffectation(a, n)])
		influenceReactionStrategy.influenceReceived(occurrence.source) [
			info("Propagation of takeoff for " + body)

			body.takeOff
		]
	}

	/** 
	 * When a drone emits the move-by-velocity instruction, transfers it to AirSim
	 */
	on MoveByVelocity {
		debug("MoveByVelocity (begin)")
		val body = affectationStrategy.affectOrGetBody(occurrence.source, [a, n|onAffectation(a, n)])
		influenceReactionStrategy.influenceReceived(occurrence.source) [
			body.moveByVelocity(occurrence.vx, occurrence.vy, occurrence.vz, occurrence.duration)
		]
		debug("MoveByVelocity (end)")
	}

	/** 
	 * When a drone emits the set-vehicle-pose instruction, transfers it to AirSim
	 */
	on SetVehiclePose {
		val body = affectationStrategy.affectOrGetBody(occurrence.source, [a,n|onAffectation(a,n)])
		influenceReactionStrategy.influenceReceived(occurrence.source) [
			synchronizedClient(body) [ it.simSetVehiclePose(occurrence.pose, true, body) ]
		]
	}
	
	/** Retrieve the perceptions for a single agent */
	private def retrieveAgentPerceptions(address : Address, name: String) {
		val state = synchronizedClient(name) [ it.getMultirotorState(name) ]
		val pose = synchronizedClient(name) [ it.simGetObjectPose(name) ]
		val kinematics = synchronizedClient(name) [ it.simGetGroundTruthKinematics(name) ]

		influenceReactionStrategy.perceptionReceived(address) [
			emit(new MultirotorStatePerception(state))[it == address]
			emit(new SimPosePerception(pose))[it == address]
			emit(new SimGroundTruthKinematicsPerception(kinematics))[it == address]
		]
	}

	private def synchronizedClient(target : String = "", operation : Procedure1<MultirotorClientInterface>) {
		var success = false

		//while (!success) {
		//	try {
				synchronized (multirotorClient) {
					operation.apply(multirotorClient)
					return
				}
		//	} catch (e : org.msgpack.rpc.error.RemoteError) {
		//		warning("An exception occurred: " + e.message + " ; Trying to re-enable API control...")
		//		multirotorClient.enableApiControl(true, target)
		//	}
		//}
	}
	
	private def <T> synchronizedClient(target: String = "", operation: Function1<MultirotorClientInterface, T>) : T {
		var success = false
		
		while (!success) {
			try {
				return synchronized(multirotorClient) { operation.apply(multirotorClient) }
			} catch (e : org.msgpack.rpc.error.RemoteError) {
				warning("An exception occurred: " + e.message + " ; Trying to re-enable API control...")
				target.enableControl
			}
		}
		
		return null
	}
	
	
	/** Retrieve the perceptions for all agents */
	private def retrievePerceptions {
		affectationStrategy.affectedBodies.forEach[address, name | retrieveAgentPerceptions(address, name)]
	}
	
	private def onAffectation(address : Address, name : String) {
		info("Received affectation: " + address.UUID + " - " + name)
		
		name.enableControl

		// Retrieve the initial perceptions for this agent
		retrieveAgentPerceptions(address, name)
	}
}
